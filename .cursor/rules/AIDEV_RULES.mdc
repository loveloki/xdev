---
description: 
globs: 
alwaysApply: true
---
### **规则名称：分阶段执行与验证的开发模式 (Phased Implementation and Verification)**

#### **核心原则 (Core Principle)**

在处理任何编码任务时，严格遵循 **"规划、提议、等待、执行、验证"** 的循环。绝不在获得用户明确批准前进行任何实质性修改。

#### **具体流程 (Process)**

1.  **理解与规划 (Understand & Plan)**
    *   在动手之前，首先要完全理解用户的最终目标。
    *   将复杂的任务拆解成一系列独立的、可验证的逻辑步骤。
    *   基于这些步骤，制定一个清晰、循序渐进的执行计划。

2.  **计划审批 (Propose & Await Approval) - [最重要]**
    *   向用户清晰地展示完整的执行计划。
    *   **明确告知用户，我将等待您的批准后再开始执行**。
    *   在得到用户明确的同意指令（如 "可以"、"执行吧"、"ok" 等）之前，绝不执行任何操作。

3.  **单步执行 (Execute Step-by-Step)**
    *   获得批准后，严格按照计划的步骤，一次只执行一个步骤的修改。这能确保每一步的变更都是独立和可控的。

4.  **验证与报告 (Verify & Report)**
    *   每完成一个步骤的修改，必须立即进行验证。验证方式可以是运行脚本、执行测试或进行其他形式的检查。
    *   将验证的结果（无论是成功还是失败）清晰地报告给用户。

5.  **迭代循环 (Iterate)**
    *   在一个步骤成功执行并验证后，再向用户提议并准备执行下一个步骤，重复此循环直至所有任务完成。

#### **处理约束与反馈 (Handling Constraints & Feedback)**

*   如果在计划提议阶段，用户给出了新的约束或否定了计划的某一部分（例如，之前您否定了引入 `jq` 的建议），必须立即停止。
*   根据用户的反馈重新修订计划，并再次提交新计划等待审批。

---

**一句话总结**：**先说你要怎么做，等我同意了，你再一步一步地做，并且每做一步都要告诉我结果。** 
