---
description: 
globs: 
alwaysApply: true
---
# 任务实施 (Implement Task)

通过周密的计划和执行来有条不紊地完成任务。

## 流程

### 1. 了解项目

- 将 load-project 规则作为指南了解项目
- 将 ANALYSIS 规则作为指南了解项目

### 2. 思考策略

- 理解完整需求
- 确定关键组件
- 考虑依赖和约束
- 规划实施方法

### 3. 评估方法

- 列出可行的实施策略
- 比较各自的优缺点
- 考虑:
  - 性能影响
  - 可维护性
  - 可扩展性
  - 代码复用性
  - 测试复杂度

### 4. 权衡利弊

- 短期 vs 长期利益
- 复杂 vs 简单
- 性能 vs 可读性
- 灵活性 vs 专注的解决方案
- 实施时间 vs 完美的解决方案

### 5. 展示计划

1.  向用户清晰地展示完整的执行计划。
2.  **明确告知用户，我将等待您的批准后再开始执行**。
3.  根据用户的反馈重新修订计划，并再次提交新计划等待审批。
4.  在得到用户明确的同意指令（如 "可以"、"执行吧"、"ok" 等）之前，绝不执行任何操作。
5.  用户同意后实施

### 6. 规划与实施工作流

遵循结构化的、基于文件的规划和实施流程，核心是 `PLAN.MD` 文件，作为所有任务的唯一事实来源。

**核心原则：**
- **透明化:** 所有计划和进度记录在 `PLAN.MD` 中，用户可见。
- **用户主导:** 每一步的执行和计划修改需用户确认。
- **迭代式:** 按顺序、一次一个地完成任务。

#### 具体执行步骤

**1. 理解需求并创建初始计划**

- **沟通与分解:** 与用户沟通，理解最终目标，并将其分解为具体子任务。
- **创建计划文件:** 创建 `PLAN.MD` 文件。
- **写入计划:** 将子任务以 Markdown 清单格式写入 `PLAN.MD`。
  - **格式:** 每个任务前使用 `- [ ]` 表示未完成。
  - **示例内容:**
    ```markdown
    # 项目计划

    - [ ] 步骤 1: 创建项目的基础目录结构。
    - [ ] 步骤 2: 实现核心的用户认证功能。
    - [ ] 步骤 3: 编写用户认证功能的单元测试。
    - [ ] 步骤 4: 构建主页面的前端框架。
    ```
- **寻求确认:** 展示 `PLAN.MD` 初始内容给用户，等待确认或修改意见。**在获得用户同意前，不进行实施。**

**2. 动态修改计划**

- **听取指令:** 用户可随时提出对计划的修改。
- **更新文件:** 根据用户指令修改 `PLAN.MD` 内容。
- **同步展示:** 每次修改后，展示 `PLAN.MD` 最新内容，确保理解同步。

**3. 按顺序实施计划**

- **等待指令:** 计划确认后，等待用户执行指令。
- **定位任务:** 读取 `PLAN.MD`，找到第一个未完成的任务。
- **声明任务:** 向用户声明：“好的，现在我将开始执行任务：‘[任务描述]’”。
- **执行任务:**
  1. **分解为子任务:** 将任务进一步细分为可管理的子任务。
  2. **从核心功能开始:** 优先实现核心功能。
  3. **增量实施:** 逐步实施每个子任务。
  4. **参考测试规则:** 测试每个组件，确保其符合预期。
  5. **集成组件:** 将完成的组件集成到系统中。
  6. **添加错误处理:** 确保每个组件具备适当的错误处理机制。
  7. **优化:** 如有需要，进行性能优化。
  8. **记录决策:** 记录关键决策和实施过程中的重要信息。
- **更新进度:** 任务完成后，立即更新 `PLAN.MD`：
  - 将已完成任务的 `- [ ]` 修改为 `- [x]`。
  - **示例：**
    ```markdown
    # 项目计划

    - [x] 步骤 1: 创建项目的基础目录结构。
    - [ ] 步骤 2: 实现核心的用户认证功能。
    - [ ] 步骤 3: 编写用户认证功能的单元测试。
    - [ ] 步骤 4: 构建主页面的前端框架。
    ```
  - 保存文件。

**4. 报告并循环**

- **报告结果:** 向用户报告刚完成的任务成果。
- **展示进度:** 展示更新后的 `PLAN.MD` 内容。
- **请求继续:** 询问用户是否希望继续执行下一个任务。
- **循环:** 等待用户指令，重复**步骤 3 和 4**，直到所有任务标记为 `[x]`。
- **最终总结:** 所有任务完成后，进行项目总结。

**5. 删除 PLAN 文件**

- **删除已完成的 PLAN 文件:** 向用户询问是否删除 PLAN 文件。


## 规则目录

- 规则在 .cursor/rules 目录下，以 mdc 结尾
- 规则在 docs/AI.MD 里

## 最佳实践

- 测试先行 (TDD)
- 保持函数短小精悍
- 使用有意义的命名
- 为复杂逻辑添加注释
- 处理边界情况
- 考虑未来维护

## 清单

- [ ] 需求完全理解
- [ ] 方法已记录
- [ ] 测试已编写
- [ ] 代码已实施
- [ ] 边界情况已处理
- [ ] 文档已更新
- [ ] 代码已审查
- [ ] 性能可接受
